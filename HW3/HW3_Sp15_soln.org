#+TITLE: 
#+AUTHOR: 
#+DATE: Due: 02/12/2015
#+LATEX_CLASS: article
#+OPTIONS: ^:{} # make super/subscripts only when wrapped in {}
#+OPTIONS: toc:nil # suppress toc, so we can put it where we want
#+OPTIONS: tex:t
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_HEADER: \usepackage[left=1in, right=1in, top=1in, bottom=1in, nohead]{geometry} 
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \usepackage[labelfont=bf]{caption}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \usepackage[parfill]{parskip}

\title{Homework 3\\Lectures 4: Electronic Structure Models\\(CBE 60547)}
\author{Prateek Mehta, Prof. William F.\ Schneider}
\maketitle


Here is an example input deck for a HFS/6-31G calculation on NH_{3}. This is a good starting template for the calculations below. You can also construct an input deck in Avogadro. Refer to the GAMESS manual for more information.

#+BEGIN_EXAMPLE
!   File created by the GAMESS Input Deck Generator Plugin for Avogadro
 $BASIS GBASIS=N31 NGAUSS=6 $END
 $CONTRL RUNTYP=ENERGY DFTTYP=SLATER $END

 $DATA 
Title
C1
N     7.0    -1.03363     0.80618     0.00000
H     1.0    -0.01363     0.80618     0.00000
H     1.0    -1.37362     1.64340    -0.47314
H     1.0    -1.37363     0.79732     0.96162
 $END
#+END_EXAMPLE


* =GAMESS= vs. =FDA=

Using =GAMESS=, perform a DFT/Hartree-Fock-Slater (~DFTTYP=SLATER~) calculation on an Ar atom using the 6-31G basis set.

#+ATTR_LATEX: :options [(a)]
a. How many primitive Gaussians are included in this calculation? How many total basis functions? How do they divide between s, p, and d?

b. How many SCF iterations does the calculation take to converge?

c. What is the final calculated HFS/6-31G energy of the atom?

d. What are the identities (1s, 2p, etc.) and energies of the occupied atomic orbitals?

e. Compare your computed total energy and atomic orbital energies with those you got from Homework 2 using the fda code for Ar.


** Solution

*** a)

This is an example input file for Ar. The resulting output files can be seen in ./Ar

#+BEGIN_EXAMPLE
 $BASIS GBASIS=N31 NGAUSS=6 $END
 $CONTRL RUNTYP=ENERGY DFTTYP=SLATER $END

 $DATA 
Title
C1
Ar    18.0    -3.86612     1.03789     0.00000
 $END
#+END_EXAMPLE

By looking at the log file it seems we have 13 primitive Gaussians. Below is the shell command to produce this result.

#+BEGIN_SRC sh
grep "GAUSSIAN BASIS FUNCTIONS" Ar/Ar.log
#+END_SRC

#+RESULTS:
:  NUMBER OF CARTESIAN GAUSSIAN BASIS FUNCTIONS =   13

We used the 6-31G basis set. The distribution of basis functions are listed below.

| Orbital | Basis Sets | Primitive gauss functions | Total gauss functions |
|---------+------------+---------------------------+-----------------------|
| 1s      |          1 |                         6 |                     6 |
| 2s      |          1 |                         6 |                     6 |
| 2p      |          3 |                         6 |                    18 |
| 3s      |          1 |                         3 |                     3 |
| 3p      |          3 |                         3 |                     9 |
| 3s+     |          1 |                         1 |                     1 |
| 3p+     |          3 |                         1 |                     3 |
|---------+------------+---------------------------+-----------------------|
| Total   |         13 |                           |                    46 |



*** b) 

12 SCF iterations are required to reach convergence.

#+BEGIN_SRC sh
grep "ITER" Ar/Ar.dat
#+END_SRC

#+RESULTS:
: E(R-SLATER)=     -524.4520526614, E(NUC)=    0.0000000000,   12 ITERS


*** c) 

The final HFS/6-31G energy is -524.452  hartrees.

*** d) 

#+caption: =GAMESS= and =FDA= orbital energies [[label:orbital-energies]]
| Orbital | E_{GAMESS} (hartree) | E_{FDA} (hartree) |
|---------+----------------------+-------------------|
| 1s      |            -113.6768 |         -116.9366 |
| 2s      |             -10.7172 |          -11.6037 |
| 2p      |              -8.3677 |           -9.2721 |
| 3s      |              -0.8218 |           -1.1022 |
| 3p      |              -0.3222 |           -0.5735 |
| 3s+     |               0.4316 |                   |
| 3p+     |               0.5206 |                   |


*** e)

The =FDA= total energy is -526.8275 hartree, which means its a slightly better method for predicting the energy of Ar. The orbital energies are listed in table ref:orbital-energies. 

* The Generalized Gradient Approximation

The generalized gradient approximation (GGA) is an improvement on Hartree-Fock-Slater that gives a nice balance between accuracy and computational expense. Using =GAMESS=, perform a single point calculation (~RUNTYP=ENERGY~) on the bent triatomic SO_{2} using the GGA (~DFTTYP=PBE~) and PC1 basis set (~GBASIS=PC1~, ~ISPHER=1~; no ~NGAUSS~ flag needed). Guess appropriate bond lengths and angle. Be sure to report your input file for your calculation.

#+ATTR_LATEX: :options [(a)]
a. What is the spin multiplicity of SO_{2}? (Recall, the spin multiplicity is 2S +1, where S = 1/2 for one unpaired electron, S = 1 for two unpaired electrons, and so on).

b. How many basis functions are in this calculation?

c. How many SCF cycles does it take to converge?

d. What SCF algorithm does the code use?

e. What is the final total energy of the molecule?

f. How many occupied orbitals does the molecule have? What are the energies of the HOMO and LUMO?

g. What is the final dipole moment?

h. What are the Mulliken gross charges on the S and O atoms?

i. Plot out the electrostatic potential of SO_{2}. Which end of the molecule is electrophilic and which is nucleophilic?
   
** Solution

The relevant files can be found at the github repository for the course.

INPUT File: file:./SO2/SO2.inp

LOG File: file:./SO2/SO2.log

DAT File: file:./SO2/SO2.dat

*** a) 

The spin multiplicity for SO_{2} is 2 * 0 + 1 = 1. 

*** b)
The number of basis functions in the calculation is 49.

#+BEGIN_SRC sh
grep "GAUSSIAN BASIS FUNCTIONS" ./SO2/SO2.log
#+END_SRC

#+RESULTS:
:  NUMBER OF CARTESIAN GAUSSIAN BASIS FUNCTIONS =   49


*** c)

It takes 23 SCF cycles to converge.

#+BEGIN_SRC sh
grep "ITER" ./SO2/SO2.dat
#+END_SRC

#+RESULTS:
: E(R-PBE)=     -548.2499367382, E(NUC)=  109.8468077125,   23 ITERS

*** d)

The code uses the DIIS algorithm.


*** e)
    
The final total energy is -548.2499 hartrees

*** f)

There are 16 occupied orbitals.

#+BEGIN_SRC sh
grep "OCCUPIED" ./SO2/SO2.log
#+END_SRC

#+RESULTS:
:  NUMBER OF OCCUPIED ORBITALS (ALPHA)          =   16
:  NUMBER OF OCCUPIED ORBITALS (BETA )          =   16
:     16 ORBITALS ARE OCCUPIED (    7 CORE ORBITALS).




*** g)

The final dipole moment is 1.55 debyes

*** h)

The Mulliken charges are tabulated below.

| ATOM |    CHARGE |
|------+-----------|
| S    |  0.768910 |
| O    | -0.393816 |
| O    | -0.375094 |


*** i)

The electrostatic potential is shown below.

[[file:SO2/SO2-electrostatic-potential.png]]

* Geometry Optimization of SO_{2}

#+ATTR_LATEX: :options [(a)]
a. Do a series of calculations in which you vary the S–O distances and O–S–O angle over a regular grid of values. Approximate the combination of values that give the lowest energy.

b. A geometry optimization (~RUNTYP=OPTIMIZE~) is a faster way to find the optimal geometry of a molecule. Perform a geometry optimization on SO_{2} using the same computational model as above. What are the optimal S–O distances and O–S–O angle?

** Solution

*** a)


**** Creating input files and running =GAMESS=

Here is some python code that creates and runs =GAMESS= calculations over a grid of distances and angles. Note that there are more efficient ways of doing these kind of calculations by using the CRC queueing system, which we will learn about in future classes.

#+BEGIN_SRC python
import os
import numpy as np

# Input file template
gamess_script=''' $BASIS GBASIS=PC1 $END
 $CONTRL COORD=ZMT ISPHER=1 RUNTYP=ENERGY DFTTYP=PBE $END

 $DATA 
Title
Cnv 2

S    
O 1 {0:1.2f} 
O 1 {0:1.2f} 2 {1}
 $END'''

distances = np.linspace(1.3, 1.7, 5)
angles = np.linspace(90., 150., 7)

# Path to current directory
cwd = os.getcwd()

for distance in distances:
    for angle in angles:
        
        # Create calculation directory
        wd = './SO2/optimize/{0:1.2f}-A/{1:1.2f}-deg/'.format(distance, angle)
        if not os.path.exists(wd):
            os.makedirs(wd)

        # Change into calculation directory
        os.chdir(wd)
        # Create an input file
        with open('gamess.inp', 'w') as f:
            f.write(gamess_script.format(distance, angle))     
        # Run GAMESS   
        os.system('rungms gamess.inp > gamess.log')
        # Change back to current working directory
        os.chdir(cwd)
#+END_SRC

#+RESULTS:


**** Finding the optimum distance and angle

Now we will read the .dat files for the total energies and plot them. This is similar to what we did in Lab1. 

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

distances = np.linspace(1.3, 1.7, 5)
angles = np.linspace(90., 150., 7)

plt.figure(figsize = (6,8))
for angle in angles:
    
    energies = []
    for distance in distances:
        
        # Create calculation directory
        filename = './SO2/optimize/{0:1.2f}-A/{1:1.2f}-deg/gamess.dat'.format(distance, angle)

        with open(filename, 'r') as f:
            for line in f.readlines():
                # We want lines like
                # E(R-PBE)=     -547.9256306493, E(NUC)=  130.1179768731,   20 ITERS
                if 'E(R-PBE)' in line:
                    # Strip out the commas
                    line = line.replace(',', "")
                    # Now extract the energy
                    energy = float(line.split()[1])
                    energies.append(energy)
                    # Break out of the loop as we got the energy
                    break
    plt.plot(distances, energies, 'o-', label = '{0:1.0f} deg'.format(angle))
plt.legend(loc='best')
plt.xlabel('Distance ($\AA$)')
plt.ylabel('Energy (hartree)')
plt.ticklabel_format(useOffset=False) # make the y-axis without offset
plt.tight_layout()
plt.savefig('SO2-optimization.png')
plt.show()
#+END_SRC

#+RESULTS:

#+ATTR_LATEX: :width 3in
[[./SO2-optimization.png]]

From the plot it looks like the lowest energy is roughly around a O-S-O angle of 120\deg and O-S distance of 1.5 \AA. Note that we could have fit a curve to our data for a better approximation. 


*** b)

Using ~RUNTYP=OPTIMIZE~ we have the S-O distance as 1.49 \AA and the O-S-O angle as 118.35\deg. Looks like we came pretty close using our rough scan!

LOG File: [[file:SO2/SO2-opt.log]]

* Other Molecules

Oxygen makes bonds with lots of things. Fill out the table below by doing an appropriate set of calculations:

** Solution
#+ATTR_LATEX:
| AO_{2}  | A-O (\AA) | O-A-O (\deg) | Spin Multiplicity | Dipole Moment (e\AA) | Mulliken Charge    |
|---------+-----------+--------------+-------------------+----------------------+--------------------|
| CO_{2}  |     1.176 |          180 |                 1 |                    0 | C: 0.54, O: -0.27  |
| NO_{2}  |     1.211 |       133.74 |                 2 |                 0.27 | N: 0.38, O: -0.19  |
| SiO_{2} |     1.538 |          180 |                 1 |                    0 | Si: 0.99, O: -0.50 |
| SO_{2}  |     1.490 |       118.35 |                 1 |                 1.88 | S: 0.82, O: -0.41  |
